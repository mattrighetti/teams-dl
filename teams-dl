#!/bin/bash

source scriptUtils.sh

function __check_output() {
    if [[ $? -ne 0 ]]; then
        echo "Error getting JSON"
        exit 1
    fi
}

function getMainJSON() {
    VIDEO_ID=$1

    curl -s "https://euwe-1.api.microsoftstream.com/api/videos/${VIDEO_ID}?\$expand=creator&api-version=1.0-private" \
         -H "Authorization: Bearer ${TOKEN}"
}

function videolink_query() {
    LINK=$1

    curl -s $LINK \
        -H "Authorization: Bearer ${TOKEN}" | \
        grep -i -o "qualitylevels([0-9]*)/manifest(video.*)" | \
        grep -v "keyframes" | \
        tail -n 1
}

function audiolink_query() {
    LINK=$1

    curl -s $LINK \
        -H "Authorization: Bearer ${TOKEN}" | \
        grep -i -o "qualitylevels([0-9]*)/manifest(a.*)" | \
        tail -n 1
}

function protectionKeyUri_query() {
    LINK=$1

    curl -s $LINK \
        -H "Authorization: Bearer ${TOKEN}" | \
        grep -o -E '"https.*"' | \
        tr -d '"'
}

function video_data_full() {
    LINK=$1

    curl -s $LINK \
        -H "Authorization: Bearer ${TOKEN}" > video_full.m3u8
}

function audio_data_full() {
    LINK=$1

    curl -s $LINK \
        -H "Authorization: Bearer ${TOKEN}" > audio_full.m3u8
}

function audio_data_tmp() {
    TMP_KEY="file://$(pwd)/videos"
    KEY_FILE="my.key"
    ID=$( cat audio_full.m3u8 | grep -o -E '".*"' | sed -E "s/.*api\/videos\/([A-Za-z0-9-]+)\/.*/\1/" )

    NEW_URI="${TMP_KEY}/${KEY_FILE}"
    APATH="audio_segments/"

    cat audio_full.m3u8 | \
        sed -e "s#\".*\"#\"${NEW_URI}\"#" | \
        sed -E "s#.*(Fragments.*)#${APATH}\1#" > ./videos/audio_tmp.m3u8
}

function protectionKey_query() {
    LINK=$1

    curl -s $LINK \
        -H "Authorization: Bearer ${TOKEN}" \
        -H "encoding: null" > ./videos/my.key
}

function video_data_tmp() {
    TMP_KEY="file://$(pwd)/videos"
    KEY_FILE="my.key"
    ID=$( cat video_full.m3u8 | grep -o -E '".*"' | sed -E "s/.*api\/videos\/([A-Za-z0-9-]+)\/.*/\1/" )

    NEW_URI="${TMP_KEY}/${KEY_FILE}"
    VPATH="video_segments/"

    cat video_full.m3u8 | \
        sed -e "s#\".*\"#\"${NEW_URI}\"#" | \
        sed -E "s#.*(Fragments.*)#${VPATH}\1#" > ./videos/video_tmp.m3u8
}

function aria2_download() {
    FILE=$1
    path=$2
    n=$3

    aria2c -i "${FILE}" \
        -j $n \
        -x $n \
        -d "$path" \
        --header="Authorization: Bearer ${TOKEN}"
}

function join_video_audio() {
    VFILE=$1
    AFILE=$2
    OFILE=$3

    ffmpeg \
        -protocol_whitelist file,http,https,tcp,tls,crypto -allowed_extensions ALL -i "$AFILE" \
        -protocol_whitelist file,http,https,tcp,tls,crypto -allowed_extensions ALL -i "$VFILE" \
        -async 1 -c copy -bsf:a aac_adtstoasc -n "$OFILE"
}

function getJSONdata() {
    JSON=$1
    FIELD=$2
    
    echo $JSON | \
    jq -r ".${FIELD}" 2>/dev/null
}

export TOKEN=$(cat token)

LINK=$( cat links.txt )
guid=${LINK##*/}
JSON=$( getMainJSON ${guid} )

HLS_URL=$(getJSONdata "${JSON}" "playbackUrls[2].playbackUrl")
BASE_URL="${HLS_URL%/*}/"
VIDEO_URI=$( videolink_query $HLS_URL )
AUDIO_URI=$( audiolink_query $HLS_URL )

video_data_full "$BASE_URL$VIDEO_URI"
video_data_tmp
audio_data_full "$BASE_URL$AUDIO_URI"
audio_data_tmp

PKEY_URL="$( protectionKeyUri_query "$BASE_URL$VIDEO_URI" )"
protectionKey_query $PKEY_URL

aria2_download "video_full.m3u8" "./videos/video_segments" 5
aria2_download "audio_full.m3u8" "./videos/audio_segments" 5

join_video_audio "videos/audio_tmp.m3u8" "videos/video_tmp.m3u8" "video.mp4"

exit 0
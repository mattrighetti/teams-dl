#!/bin/bash

source scriptUtils.sh

# Returns initial JSON that contains critical data about HLS location and video name + description
function getMainJSON() {
    VIDEO_ID=$1

    curl -s "https://euwe-1.api.microsoftstream.com/api/videos/${VIDEO_ID}?\$expand=creator&api-version=1.0-private" \
         -H "Authorization: Bearer ${TOKEN}"
}

# Returns video URL
function videolink_query() {
    LINK=$1

    curl -s $LINK \
        -H "Authorization: Bearer ${TOKEN}" | \
        grep -i -o "qualitylevels([0-9]*)/manifest(video.*)" | \
        grep -v "keyframes" | \
        tail -n 1
}

# Returns audio URL
function audiolink_query() {
    LINK=$1

    curl -s $LINK \
        -H "Authorization: Bearer ${TOKEN}" | \
        grep -i -o "qualitylevels([0-9]*)/manifest(a.*)" | \
        tail -n 1
}

# Returns key URL
function getProtectionKeyURL() {
    LINK=$1

    curl -s $LINK \
        -H "Authorization: Bearer ${TOKEN}" | \
        grep -o -E '"https.*"' | \
        tr -d '"'
}

# Downloads and saved full original manifest needed to download video/audio fragments
function download_m3u8_data() {
    LINK=$1
    OFILE=$2
    OFILE_FOLDER=${OFILE%%/*}

    if [[ ! -d $OFILE_FOLDER ]]; then
        mkdir -p $OFILE_FOLDER
    fi

    curl -s $LINK \
        -H "Authorization: Bearer ${TOKEN}" > $OFILE
}

# Makes TMP file needed to locate audio fragments downloaded locally with aria2
function create_tmp_m3u8_audio() {
    IFILE=$1
    tmp_folder=${IFILE%%/*}
    TMP_KEY="file://$(pwd)/$tmp_folder"
    KEY_FILE="my.key"
    ID=$( cat $IFILE | grep -o -E '".*"' | sed -E "s/.*api\/videos\/([A-Za-z0-9-]+)\/.*/\1/" )

    NEW_URI="${TMP_KEY}/${KEY_FILE}"
    APATH="audio_segments/"

    cat $IFILE | \
        sed -e "s#\".*\"#\"${NEW_URI}\"#" | \
        sed -E "s#.*(Fragments.*)#${APATH}\1#" > "./$tmp_folder/audio_tmp.m3u8"
}

# Creates file that contains key to decrypt audio/video fragments
function protectionKey_query() {
    LINK=$1
    OFILE=$2

    curl -s $LINK \
        -H "Authorization: Bearer ${TOKEN}" \
        -H "encoding: null" > $OFILE
}

# Makes TMP file needed to locate video fragments downloaded locally with aria2
function create_tmp_m3u8_video() {
    IFILE=$1
    tmp_folder=${IFILE%%/*}
    TMP_KEY="file://$(pwd)/$tmp_folder"
    KEY_FILE="my.key"
    ID=$( cat $IFILE | grep -o -E '".*"' | sed -E "s/.*api\/videos\/([A-Za-z0-9-]+)\/.*/\1/" )

    NEW_URI="${TMP_KEY}/${KEY_FILE}"
    VPATH="video_segments/"

    cat $IFILE | \
        sed -e "s#\".*\"#\"${NEW_URI}\"#" | \
        sed -E "s#.*(Fragments.*)#${VPATH}\1#" > "./$tmp_folder/video_tmp.m3u8"
}

# Downloads video/audio fragments FAST
function aria2_download() {
    FILE=$1
    path=$2
    n=$3

    aria2c -i "${FILE}" \
        -j $n \
        -x $n \
        -d "$path" \
        --header="Authorization: Bearer ${TOKEN}" 1>/dev/null 2>&1
}

# Joins video and audio fragments after download
function join_video_audio() {
    VFILE=$1
    AFILE=$2
    OFILE=$3

    infoln "Joining video and audio..."
    ffmpeg \
        -nostdin \
        -protocol_whitelist file,http,https,tcp,tls,crypto -allowed_extensions ALL -i "$AFILE" \
        -protocol_whitelist file,http,https,tcp,tls,crypto -allowed_extensions ALL -i "$VFILE" \
        -async 1 -c copy -bsf:a aac_adtstoasc -n "$OFILE" 1>/dev/null 2>&1
    
    if [[ $? -ne 0 ]]; then
        errorln "Something went wrong with video/audio parsing"
        errorln "Affected video: $OFILE"
    else
        successln "Successfully downloaded $OFILE"
    fi
}

# Extracts FIELD from given JSON
function getJSONdata() {
    JSON=$1
    FIELD=$2
    
    echo $JSON | \
    jq -r ".${FIELD}" 2>/dev/null
}

# Downloads video given a GUID that usually appears at the end of the sharing link
function download_video() {
    GUID=$1
    tmp_folder=$2

    JSON=$( getMainJSON ${GUID} )
    
    if [[ -z $JSON ]]; then
        fatalln "Couldn't get JSON data of video $GUID"
    fi

    HLS_URL=$(getJSONdata "${JSON}" "playbackUrls[2].playbackUrl")
    TITLE=$( getJSONdata "${JSON}" "name" )
    DESCRIPTION=$( getJSONdata "${JSON}" "description" )
    OUTFILE="videos/${TITLE}-${DESCRIPTION}-$tmp_folder-$(date +%s).mp4"
    BASE_URL="${HLS_URL%/*}/"
    VIDEO_URI=$( videolink_query $HLS_URL )
    AUDIO_URI=$( audiolink_query $HLS_URL )

    download_m3u8_data "$BASE_URL$VIDEO_URI" "$tmp_folder/video_full.m3u8"
    download_m3u8_data "$BASE_URL$AUDIO_URI" "$tmp_folder/audio_full.m3u8"

    PROTECTION_KEY_URL="$( getProtectionKeyURL "$BASE_URL$VIDEO_URI" )"
    protectionKey_query $PROTECTION_KEY_URL "$tmp_folder/my.key"

    infoln "Downloading $OUTFILE"

    aria2_download "$tmp_folder/video_full.m3u8" "$tmp_folder/video_segments" 5
    aria2_download "$tmp_folder/audio_full.m3u8" "$tmp_folder/audio_segments" 5

    create_tmp_m3u8_video "$tmp_folder/video_full.m3u8"
    create_tmp_m3u8_audio "$tmp_folder/audio_full.m3u8"

    infoln "Joining videos/${TITLE}-${DESCRIPTION}-$(date +%s).mp4"
    join_video_audio "$tmp_folder/audio_tmp.m3u8" "$tmp_folder/video_tmp.m3u8" "$OUTFILE"
    rm -r $tmp_folder/*
}

function print_help() {
    echo "Teams-dl is a script tool that downloads Microsoft Stream meetings that you pass to it"
    echo "Usage: teams-dl [ -f links_file ] [ -tf ticket_file ] [ -t ticket ] [ -i links ]"
    echo ""
    echo "       Command summary:"
    echo "       -f, --file             Use links contained in file"
    echo "       -t, --ticket           Input ticket from command line"
    echo "       -tf, --ticket-file     Use ticket contained in file"
    echo "       -i                     Input links from command line and don't use file input"
    echo "       -p                     Launches specified number of processes"
    echo "       -o                     Download videos in specified folder"
    echo "       -v                     Output verbose logs"
    echo "       -h, --help             Print info about the program"
    exit 0
}



# GLOBAL
PROCESSES=1
DOWNLOAD_FOLDER="videos"

if [[ $# -eq 0 ]]; then
    print_help
fi

# ARG PARSER
while [[ $# -ge 1 ]]; do
key="$1"
    case $key in
        -f|--file)
        if [[ ! -z "$2" ]]; then
            LINKS_FILE=$2
        else
            fatalln "You have not provided enough arguments for flag -f"
        fi
        shift
        shift
        ;;
        -t|--token)
        if [[ ! -z "$2" ]]; then
            export TOKEN=$2
        else
            fatalln "You have not provided enough arguments for flag -t"
        fi
        shift
        shift
        ;;
        -tf|--token-file)
        if [[ ! -z "$2" ]]; then
            TOKEN_FILE=$2
        else
            fatalln "You have not provided enough arguments for flag -tf"
        fi
        shift
        shift
        ;;
        -i)
        shift
        ;;
        -p)
        if [[ ! -z "$2" ]]; then
            PROCESSES=$2
        else
            fatalln "You have not provided enough arguments for flag -p"
        fi
        shift
        shift
        ;;
        -o)
        if [[ ! -z "$2" ]]; then
            DOWNLOAD_FOLDER=$2
        else if [[ "$2"!=tmp* ]]; then
            fatalln "You can't use $2 as download folder name because tmp[0-9] is reserved for aria2 fragments"
        else
            fatalln "You have not provided enough arguments for flag -o"
        fi
        shift
        shift
        ;;
        -v)
        VERBOSE=true
        shift
        ;;
        -h|--help)
        print_help
        ;;
        https*)
        LINKS+=( "$1" )
        shift
        ;;
        -*|--*)
        errorln "Error: flag $1 is not recognized"
        exit 1
        ;;
        *)
        errorln "Error: $1 could not be recognized"
        exit 1
        ;;
    esac
done

if [[ "$VERBOSE" = true ]]; then
    debugln "LINKS_FILE=$LINKS_FILE"
    debugln "LINKS=$LINKS"
    debugln "TOKEN=$TOKEN"
    debugln "TOKEN_FILE=$TOKEN_FILE"
    debugln "PROCESSES=$PROCESSES"
    debugln "OUTPUT_FOLDER=$DOWNLOAD_FOLDER"
fi

if [[ -z $LINKS_FILE  ]] && [[ -z $LINKS ]]; then
    fatalln "No link or link file has been specified"
fi

if [[ ! -z $LINKS_FILE  ]] && [[ ! -z $LINKS ]]; then
    warnln "You have given a link file and more input links, only the file links will be downloaded"
    LINKS=()
fi

if [[ ! -f $LINKS_FILE ]]; then
    fatalln "$LINKS_FILE doesn't exist."
else
    echo "ok $LINKS_FILE"
fi

if [[ -z $TOKEN_FILE  ]] && [[ -z $TOKEN ]]; then
    fatalln "No ticket or ticket file has been specified"
fi

if [[ ! -z $TOKEN_FILE  ]] && [[ ! -z $TOKEN ]]; then
    warnln "You have given a ticket file and a ticket input, only the ticket file will be used"
fi

# MAIN

if [[ -z $TOKEN ]]; then
    export TOKEN=$( cat token )
fi

if [[ ! -d $DOWNLOAD_FOLDER ]]; then
    mkdir -p $DOWNLOAD_FOLDER
fi

if [[ ${#LINKS[@]} -eq 0 ]]; then
    while read LINK; do
        LINKS+=( "$LINK" )
    done < $LINKS_FILE
fi

i=0
for link in "${LINKS[@]}"; do
    ((i=i%PROCESSES)); ((i++==0)) && wait
    guid=${link##*/}
    successln $guid
    download_video $guid "tmp$i" &
done
wait

infoln "Cleaning tmp folders..."
rm -rf tmp*

exit 0